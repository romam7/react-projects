https://www.youtube.com/playlist?list=PLvq-jIkSeTUZ5XcUw8fJPTBKEHEKPMTKk

* JSX: Sintaxis javascript que nos va a producir elements de react, no es HTML
* Component: Interfaz de usuario, pueden o no tener estado
	- Un componente de clase debe tener su componente de render, que es el que le va a permitir renderizar el código
* Props: valores que recibe un componente hijo de su componente padre y se agrupan en un objeto llamado props, para pasar este objeto es como agregarle un atributo al componente
	- Son inmutables, son valores de solo lectura, no las puedes modificar
* State: Conjunto de variables que va a tener la aplicación o componentes, variables que intervienen en la modificación de X componente
	- Es inmutable
	- Es asíncrono
	- No es accesible desde otro componente excepto de aquel que lo posee y lo asigna
	- Los function component no pueden tener estado, hasta la versión 17 se permitió esto
* Renderizado condicional de componentes: Cuando un valor de nuestro estado cambia y esto obliga a nuestro componente a re-pintar la interfaz
* Renderizado de elementos: Al llamar a una funcion, es sin parentesis, ya que significa invocación inmediata
* Lass arrow function heredan el this del contexto en el que se encuentran
* Cuando una función recibe más de un parametro entonces se tiene que llamar como arrow function
* React es one way databinding - flujo unidireccional
	- Si deseamos una comunicación bidireccional, puede ser con eventos
* Un componente se va a renderizar cuando le pasan propiedades o cuando se ve alterado su estado
* Ciclo de vida: Método especiales de react que se ejecutan de manera automática en un componente de clase, los cuales son montaje, actualizacion y desmontaje
	- Montaje:
		* constructor, se ejecuta al crear la instancia de un componente, se puede inicializar el estado y enlazar manejadores de eventos
		* render, único método requeridom cuando se ejecuta examina el estado y las propiedades y dibuja en componente en el arbol del dom
		* componentDidMount, se invoca inmendiatamente después de que un componente se ha insertado en el dom, peticiones, conexiones, etc
	- Actualización:
		* render, repinta el componente de acuerdo a la afectación del estado
		* componentDidUpdate, se ejecuta inmendiatamente después de que la actualizacion del estado o las propiedades sucede, ideal para hacer peticones externas
	- Desmontaje:
		- componentDidUnmount: Se ejecuta antes de destruir el componente del arbol del dom, método útil para hacer tareas de limpieza
* Hooks: Disponible en react a partir de la versión 16.8, nos permite enganchar a través de funciones el concepto del estado y del ciclo de vida
	- Por cada variable de estado se recomienta tener un useState (const [variable, setVariable] = useState(valor inicial))
	- Se pueden tener tanto useEffect como se nececiten